# Generated by Django 3.1.1 on 2021-01-14 05:43

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Mcpmasterlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cust_code', models.CharField(blank=True, max_length=20, null=True)),
                ('customer', models.CharField(blank=True, max_length=250, null=True)),
                ('scode', models.CharField(blank=True, max_length=10, null=True)),
                ('salesperson', models.CharField(blank=True, max_length=250, null=True)),
                ('ave_nps', models.CharField(blank=True, max_length=150, null=True)),
                ('class_label', models.CharField(blank=True, max_length=150, null=True)),
                ('address', models.CharField(blank=True, max_length=250, null=True)),
                ('area', models.CharField(blank=True, max_length=250, null=True)),
                ('odd_even', models.CharField(blank=True, max_length=10, null=True)),
                ('branch', models.CharField(blank=True, max_length=5, null=True)),
                ('channel', models.CharField(blank=True, max_length=10, null=True)),
                ('freq', models.CharField(blank=True, max_length=5, null=True)),
                ('day', models.CharField(blank=True, max_length=10, null=True)),
                ('cterm', models.CharField(blank=True, max_length=150, null=True)),
                ('climit', models.CharField(blank=True, max_length=150, null=True)),
                ('sman_type', models.CharField(blank=True, max_length=150, null=True)),
                ('gtm', models.CharField(blank=True, max_length=250, null=True)),
                ('group', models.CharField(blank=True, max_length=150, null=True)),
                ('town', models.CharField(blank=True, max_length=250, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=150, null=True)),
                ('channel_group', models.CharField(blank=True, max_length=150, null=True)),
                ('channel_group2', models.CharField(blank=True, max_length=150, null=True)),
                ('chain', models.CharField(blank=True, max_length=250, null=True)),
                ('area_class', models.CharField(blank=True, max_length=50, null=True)),
                ('old_new', models.CharField(blank=True, max_length=5, null=True)),
                ('geolocation', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'mcpmasterlist',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('link_mcp', models.CharField(blank=True, error_messages={'unique': 'Link MCP data is already exists.'}, max_length=200, null=True, unique=True, verbose_name='link mcp data')),
                ('user_type', models.CharField(choices=[('1', 'ADMIN'), ('2', 'GTM'), ('3', 'SALESPERSON')], default=2, max_length=10, verbose_name='account type')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
