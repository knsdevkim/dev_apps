# Generated by Django 3.1.1 on 2021-02-03 07:44

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Control',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('control_no', models.CharField(default='NO CONTROL NO.', max_length=250)),
                ('date', models.DateField(auto_now=True)),
                ('evaluated_person', models.CharField(max_length=250)),
                ('line_manager', models.CharField(max_length=250)),
                ('evaluator', models.CharField(max_length=250)),
            ],
            options={
                'db_table': 'control_no',
            },
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey1_competency_level1', models.CharField(max_length=250)),
                ('survey1_competency_level2', models.CharField(max_length=250)),
                ('survey1_competency_level3', models.CharField(max_length=250)),
                ('survey2_competency_level1', models.CharField(max_length=250)),
                ('survey2_competency_level2', models.CharField(max_length=250)),
                ('survey3_competency_level1', models.CharField(max_length=250)),
                ('survey3_competency_level2', models.CharField(max_length=250)),
                ('survey3_competency_level3', models.CharField(max_length=250)),
                ('survey3_competency_level4', models.CharField(max_length=250)),
                ('survey3_competency_level5', models.CharField(max_length=250)),
                ('survey3_competency_level6', models.CharField(max_length=250)),
                ('survey3_competency_level7', models.CharField(max_length=250)),
                ('survey3_competency_level8', models.CharField(max_length=250)),
                ('survey3_competency_level9', models.CharField(max_length=250)),
                ('survey3_competency_level10', models.CharField(max_length=250)),
                ('survey3_competency_level11', models.CharField(max_length=250)),
                ('survey1_grade1', models.CharField(max_length=250)),
                ('survey1_grade2', models.CharField(max_length=250)),
                ('survey1_grade3', models.CharField(max_length=250)),
                ('survey2_grade1', models.CharField(max_length=250)),
                ('survey2_grade2', models.CharField(max_length=250)),
                ('survey3_grade1', models.CharField(max_length=250)),
                ('survey3_grade2', models.CharField(max_length=250)),
                ('survey3_grade3', models.CharField(max_length=250)),
                ('survey3_grade4', models.CharField(max_length=250)),
                ('survey3_grade5', models.CharField(max_length=250)),
                ('survey3_grade6', models.CharField(max_length=250)),
                ('survey3_grade7', models.CharField(max_length=250)),
                ('survey3_grade8', models.CharField(max_length=250)),
                ('survey3_grade9', models.CharField(max_length=250)),
                ('survey3_grade10', models.CharField(max_length=250)),
                ('survey3_grade11', models.CharField(max_length=250)),
                ('survey1_feedback1', models.TextField()),
                ('survey1_feedback2', models.TextField()),
                ('survey1_feedback3', models.TextField()),
                ('survey2_feedback1', models.TextField()),
                ('survey2_feedback2', models.TextField()),
                ('survey3_feedback1', models.TextField()),
                ('survey3_feedback2', models.TextField()),
                ('survey3_feedback3', models.TextField()),
                ('survey3_feedback4', models.TextField()),
                ('survey3_feedback5', models.TextField()),
                ('survey3_feedback6', models.TextField()),
                ('survey3_feedback7', models.TextField()),
                ('survey3_feedback8', models.TextField()),
                ('survey3_feedback9', models.TextField()),
                ('survey3_feedback10', models.TextField()),
                ('survey3_feedback11', models.TextField()),
                ('control_no', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.control')),
            ],
            options={
                'db_table': 'evaluations',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
